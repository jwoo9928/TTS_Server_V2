# Use an official Node.js runtime as a parent image
FROM node:18-alpine AS builder

# Set the working directory in the container
WORKDIR /app

# Install NestJS CLI globally
RUN npm install -g @nestjs/cli

# Initialize a new NestJS project in the current directory (/app)
# Using yarn as the package manager and skipping git initialization
RUN nest new . --skip-git --package-manager yarn

# Create necessary directories within src
RUN mkdir -p src/tts/dto

# Copy specific files to their correct locations, overwriting defaults
COPY main.ts ./src/main.ts
COPY app.module.ts ./src/app.module.ts
COPY tts.controller.ts ./src/tts/tts.controller.ts
COPY tts.module.ts ./src/tts/tts.module.ts
COPY tts.service.ts ./src/tts/tts.service.ts
COPY create-tts.dto.ts ./src/tts/dto/create-tts.dto.ts

# Install project dependencies using yarn, including the ones specified
# kokoro-js, @nestjs/swagger, swagger-ui-express, class-validator, class-transformer, @nestjs/config
# These should be added to the package.json generated by 'nest new' before running yarn install
# We'll add them manually for now, but ideally, 'nest new' should handle base NestJS dependencies
# and we'd add the extra ones using 'yarn add' commands here.
# However, since 'nest new .' creates package.json, we'll rely on it and then install.
# Let's explicitly add the required dependencies first.
RUN yarn add kokoro-js @nestjs/swagger swagger-ui-express class-validator class-transformer @nestjs/config

# Install all dependencies defined in package.json
RUN yarn install --frozen-lockfile

# Install pm2 globally using yarn
RUN yarn global add pm2

# Build the application
RUN yarn build

# Use a smaller base image for the final stage
FROM node:18-alpine

WORKDIR /app

# Copy only necessary files from the builder stage
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /usr/local/bin/pm2 /usr/local/bin/pm2
COPY --from=builder /usr/local/lib/node_modules/pm2 /usr/local/lib/node_modules/pm2

# Expose the port the app runs on
EXPOSE 8080

# Command to run the application using pm2
CMD ["pm2-runtime", "dist/main.js"]
